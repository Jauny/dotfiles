syntax enable
set background=dark
colorscheme solarized
""""""""""""

"""""""""""""""""""""""""""""""""""""""
" RANDOM
"""""""""""""""""""""""""""""""""""""""

let mapleader=","
set nocompatible
set autoindent
set history=10000
" highlight search terms
set incsearch
set hlsearch
nnoremap <bs><bs> :noh<enter>
" no line at end of files
set nofixendofline
" do not wrap lines longer than the screen
set nowrap
" make searches case-sensitive only if they contain upper-case characters
set ignorecase smartcase
" highlight current line
set cursorline
" Don't make backups at all
set nobackup
set nowritebackup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
" Turn folding off for real, hopefully
set foldmethod=manual
set nofoldenable
" If a file is changed outside of vim, automatically reload it without asking
set autoread
" Use the old vim regex engine (version 1, as opposed to version 2, which was
" introduced in Vim 7.3.969). The Ruby syntax highlighting is significantly
" slower with the new regex engine.
set re=2

" tell CtrlP to not look into vendor/ dir
set wildignore+=*/vendor/*


"""""""""""""""""""""""""""""""""""""""
" FILE TREE
"""""""""""""""""""""""""""""""""""""""
let g:netrw_banner = 0
let g:netrw_liststyle = 3


"""""""""""""""""""""""""""""""""""""""
" LOOKS
"""""""""""""""""""""""""""""""""""""""

" vertical split lines should look like a line instead of a dashed one
set fillchars+=vert:â”‚

" set syntax highlighting
syntax on
" remove bg color on some characters
hi Normal ctermbg=none

" set line at 100 chars
:set colorcolumn=100

" set status line
" set statusline=%<%f\ (%{&ft})\ %-4(%m%)%=%-19(%3l,%02c)
set statusline=
set statusline+=%.50F      " file path, max 50 char length
set statusline+=\ -\       " separator
set statusline+=%y         " filetype
set statusline+=%=         " move to the right
set statusline+=%4l:%-3c   " line:column
set statusline+=\ -\       " separator
set statusline+=%3p%%:%-5L " percent through file:total lines
" show status line
set laststatus=2

" unable file type detection, automatically do language-dependent indenting.
filetype plugin indent on

" show line numbers
set number

" go syntax highlighting
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_operators = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_generate_tags = 1


"""""""""""""""""""""""""""""""""""""""
" REMAPPING
"""""""""""""""""""""""""""""""""""""""

" map ctrl-{h,j,kl} to move panes
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

" print go err check with ctrl - l
autocmd FileType go imap <C-l> if err != nil {<enter>



"""""""""""""""""""""""""""""""""""""""
" LANG SPECIFIC
"""""""""""""""""""""""""""""""""""""""

" default tabs as 2 spaces
set expandtab
set tabstop=2 shiftwidth=2 softtabstop=2

" for python tabs as 4 spaces
autocmd FileType python set tabstop=4 shiftwidth=4 softtabstop=2

" tsx files, set type as typescript
autocmd BufNewFile,BufRead *.tsx,*.jsx set filetype=typescriptreact

" format with goimports instead of gofmt
let g:go_fmt_command = "goimports"
" <enter> runs ./gotest.sh for core-grpc repo
autocmd FileType go nmap <enter> :GoTestFunc<enter>

" autocomplete when pressing tab
function! Smart_TabComplete()
  let line = getline('.')                         " current line

  let substr = strpart(line, -1, col('.')+1)      " from the start of the current
                                                  " line to one character right
                                                  " of the cursor
  let substr = matchstr(substr, "[^ \t]*$")       " word till cursor
  if (strlen(substr)==0)                          " nothing to match on empty string
    return "\<tab>"
  endif
  let has_period = match(substr, '\.') != -1      " position of period, if any
  let has_slash = match(substr, '\/') != -1       " position of slash, if any
  if (!has_period && !has_slash)
    return "\<C-X>\<C-P>"                         " existing text matching
  elseif ( has_slash )
    return "\<C-X>\<C-F>"                         " file matching
  else
    return "\<C-X>\<C-O>"                         " plugin matching
  endif
endfunction
inoremap <expr> <tab> Smart_TabComplete()
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<CR>"
